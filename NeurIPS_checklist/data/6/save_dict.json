{"paper_index": 6, "title": " PlasticityNet: Learning to Simulate Metal, Sand, and Snow for Optimization Time Integration", "abstract": "", "introduction": "", "methods": "", "experiments": "\n\nWe show examples to demonstrate the capability of our PlasticityNet in learning versatile plasticity\nmodels. Our physical simulators are implemented using C++, and we applied PyTorch to learn the\npotential energies, which are then loaded into our simulators with TorchScript. All our potential\nenergies are trained as multilayer perceptrons using the Adam optimizer [22] on a single Nvidia RTX\n3090 GPU. Please see Appendix A.1 for more training details. All ground-truth data are generated\nusing standard explicit time integration with analytical plasticity returning mapping under small time\nstep sizes for stability. With our PlasticityNet, we can robustly simulate elastoplastic behaviors with\nmuch larger time step sizes using optimization time integrators.\n\n5.1 Training\n\nThe training of PlasticityNet only requires the return mapping (either given analytically or pre-trained)\nfor the plasticity model and the Kirchhoff stress for the underlying elasticity model. There is no need\nfor extra labeled data. At each epoch, we will sample a new batch of (F, F0, h). The sampling of\ndeformation gradients is based on its singular value decomposition F = U Diag(\u03a3)V\u22a4, with U, V\nbeing two rotation matrices. To sample F and F0 so that their singular values are close to each other,\nwe set F0 = R1 Diag(e\u03f5)R2 and F = R3 Diag(e\u03f5+\u03b4\u03f5)R4, where \u03f5 is a randomly sampled vector, \u03b4\u03f5\nis a random perturbation, and Ri\u2019s are randomly sampled rotation matrices. The hardening state is\nsampled uniformly from an appropriate range depending on the plasticity model. Please see Appendix\nA.2 for definitions of hardening states and their range selections. In this work, we uniformly sample\n\u03f5 from [\u22121, 1]d, \u03b4\u03f5 from [\u22120.1, 0.1]d for sand plasticity and metal plasticity, and [\u22120.2, 0.2]d for the\nsnow plasticity. The training loss curves of our 2D models are shown in Figure 4.\n\n5.2 Testing on 2D Simulations\n\nIn this section, explicit time integrators are used to generate the ground-truth data for the validation\nof the optimization time integrators with PlasticityNet on multiple 2D experiments. The quantitative\ncomparisons are plotted in Figure 5. We additionally include the computational costs in Table 1. We\n\n6\n\nSandSnow02500500075001000012500150001750020000Epoch102101100101102Traning LossMetal\f(a)\n\n(b)\n\n(c)\n\nFigure 5: (a) (b) The intersection-over-union (IOU) [17] measure between the ground truth and our\nresults. The IOUs are computed using the mass distributions on the MPM grid. (c) The average FEM\nnodal position difference. Note that the bounding box of the 2D metal frame is 0.1m \u00d7 0.18m.\n\nTable 1: Computational costs of 2D experiments.\nOurs\n\nExplicit\n\nExperiment\n\nSand\nSnow\nVon-Mises Metal\nNeohookean Metal\nMPM-FEM Coupling\n\nTime step (s)\n1e-3\n1e-3\n1e-2\n1e-2\n1e-3\n\ns/frame\n12.58\n35.56\n1.08\n1.03\n38.90\n\nTime step (s)\n1e-5\n1e-5\n1e-5\n1e-5\n1e-6\n\ns/frame\n6.20\n6.78\n5.39\n7.88\n184.58\n\nremark that the main objective of our work is not to surpass the performance of the existing simulation\nof every constitutive model, but to provide a methodology that enables the usage of implicit plasticity\nin an optimization time integration framework.\n\nSand Plasticity We start by learning the elastoplas-\ntic model of dry sand (Figure 6). The model com-\nbination is St. Venant-Kirchhoff (StVK) elasticity,\nand the closed-form Drucker Prager plasticity return\nmapping [23] (See Appendix A.2.1). In this example,\nwe simulate a column of sand falling onto the ground\nunder gravity with MPM. Our method generates vi-\nsually identical results compared to the ground truth,\nboth with the same time step size and a 100\u00d7 larger\ntime step size. The quantitative comparison between\nour results and the ground truth is shown in Figure 5a.\nNote that there is no hardening mechanism in this\nplasticity model, so our PlasticityNet does not need the hardening state in its input.\n\nFigure 6: Sand plasticity.\n\nSnow Plasticity with Hardening Snow is an\nelastoplastic material that can become stiffer under\ncompression. Essentially, this is the effect of hard-\nening where its elastic region get expanded. The\nvariation in the stiffness across the snow body makes\nit easily fracture. Here we simulate a snowball hitting\nthe ground in the MPM simulator (Figure 7). We use\nNeo-Hookean elasticity with the closed-form non-\nassociative Cam-Clay plasticity return mapping [15]\n(See Appendix A.2.2). Our method generates similar\nresults compared to the ground truth when using the\nsame time step size. The quantitative comparison of\nour results and the ground truth is shown in Figure 5b. Our framework remains stable even under\nmuch larger time step sizes. However, more numerical damping artifacts are introduced as the time\nstep size increases, which results in slightly different behaviors compared to the ground truth.\n\nFigure 7: Snow plasticity with hardening.\n\n7\n\nSand0.00.20.40.60.81.0Simulation Time [s]0.750.800.850.900.951.00IoUSnowMetalOurs (dt = 1e-5s) Ground truth (dt = 1e-5s) Ours (dt = 1e-3s) Ours (dt = 1e-5s) Ground truth (dt = 1e-5s) Ours (dt = 1e-3s) \fMetal Plasticity with Hardening Metal is another com-\nmon plastic material with hardening. In this example, we\ntrain PlasticityNet to learn metal plasticity with the StVK\nelasticity and the closed-form von-Mises plasticity return\nmapping [39]. (See Appendix A.2.3) We simulate a metal\nframe compressed by a rigid plate in the FEM simulator\n(Figure 8), where the Incremental Potential Contact (IPC)\n[29] is used to handle the frictional contact between the\nsolids. When we run the explicit time integration to gen-\nerate ground truth, we have to decrease Young\u2019s modulus\nto enable using large enough time step sizes so that the\nsimulation can be finished in practical time. Our method\nwith the original setting generates visually identical re-\nsults using a much large time step size. The quantitative\ncomparison of our result and the ground truth is shown in\nFigure 5c.\n\nFigure 8: Metal plasticity with harden-\ning.\n\nMetal Plasticity Return Mapping Here we show an\nexample simulated using PlasticityNet with a learned von-\nMises plasticity return mapping. The underlying elasticity\nis neo-Hookean, instead of the StVK model in the last ex-\nample (See Appendix A.2.4). Note that for Neo-Hookean\nmaterial, there is no closed-form solution available for\nthe von-Mises return mapping. In this case, a nonlinear\noptimization problem will need to be solved to perform the return mapping for every element/particle\nin every time step, which could severely slow down the standard explicit time integration. Using\nthe same parameters as the metal compression experiments above, we show that PlasticityNet with\nlearned plasticity return mapping under neo-Hookean elasticity can generate qualitatively similar\nresults (Figure 9) to those from PlasticityNet with closed-form return mapping under the StVK\nelasticity.\n\nFigure 9: Learned metal plasticity return\nmapping with neo-Hookean elasticity.\n\nMPM-FEM Coupling PlasticityNet enables the sim-\nulation of plastic materials in the MPM-FEM coupling\nframework BFEMP [33], where only pure elasticity was\nsupported. When simulating with explicit BFEMP, the\ntime step size required by stability is the minimum be-\ntween MPM step size upperbound and FEM step size\nupperbound. Here we show an example where a stiff FEM\nelastic body falls onto MPM sand (Figure 10), where the\nimplicit BFEMP can use a time step size 1000x larger than\nthe explicit BFEMP and achieves an approximately 5x\nspeedup in wall-clock time. We also remark that when the time step size is small (as is required\nto keep the explicit time integration stable in this case), MPM suffers from excessive numerical\ndamping due to the significant amount of particle-grid transfers. This is a known issue of explicit\nMPM simulations.\n\nFigure 10: Two-way coupling between\nFEM elasticity and MPM sand plasticity.\n\nDifferent Energy Representations Here we include some different energy representations we\ninvestigated (Figure 11), whose inaccurate results motivated us to develop our final representation\nEquation 8. These experiments are all conducted on the 2D sand column collapse example. The\nfirst straightforward idea is to find a globally defined neural energy function \u03a8(F) = \u03a8\u03b8(F) that\nsolves Equation 6, where \u03b8 is the parameter of the neural network. Note that it is theoretically\nunachievable to train a global potential energy function because the right hand side of Equation 6 is not\nintegrable in the plastic region. But it is still worth trying to explore an approximation by minimizing\nL(\u03b8) = EF\n. However, the experiment shows that this formulation makes\nthe sand column behave like an elastic body. It is also noteworthy that the sand column cannot even\nmaintain the rest shape at the first frame: it erroneously shrinks suddenly and jumps off the ground.\nAdditional insight is provided by realizing that a linear correction is necessary to exactly vanish stress\nwhen the deformation gradient is the identity; so we experiment with \u03a8(F) = \u03a8\u03b8(F) \u2212 \u2207F\u03a8\u03b8(I).\n\n\u2202F (F) \u2212 \u03c4 (Z(F))F\u2212\u22a4(cid:13)\n\n(cid:13)\n(cid:13)\n(cid:13)\n\n\u2202\u03a8\u03b8\n\n(cid:13)\n(cid:13)\n\nF\n\n2\n\n8\n\nOurs (E = 1e7 Pa, dt = 1e-5s) Ground truth (E = 1e7 Pa, dt = 1e-5s) Ours (E = 1e10 Pa, dt = 1e-2s) Ours (dt = 1e-3s) Explicit (dt = 1e-6s) \fFigure 11: Ablation studies on different energy representations.\n\nFigure 13: 3D simulations with sand plasticity, snow palsticity and metal plasticity.\n\nThis formulation unfortunately also leads to an insufficient capture of plasticity, giving an elastic and\nvisually distinct incorrect result. These observations motivate us to investigate a family of potential\nenergies to solve Equation 6 locally. We first use \u03a8(F, F0) = \u03a8\u03b8(F, F0) \u2212 \u2207F\u03a8\u03b8(I, F0) and train\nwith the loss function in Equation 9. The simulation captures certain plastic behaviors when the\ndeformation is small, but the result quickly deviates from the ground truth when the deformation\nbecomes larger. Finally, we come up with Equation 8 to achieve the nice results in Figure 6.\n\n5.3 Ablation Studies\n\nStability Regularizer As an ablation study for the stabil-\nity regularizer in Equation 11, we compare the simulations\nwith and without the regularizer on two 2D examples (Fig-\nure 12). Without the regularizer, the metal frame can not\neven stay in its original rest configuration after the first\ntime step. In the sand example, particles in the highlighted\nregions tend to separate from the sand column in a non-\nphysical manner. These demonstrate that our regularizer\nsignificantly improves the stability of the simulation.\n\n5.4 Testing on 3D Simulations\n\nFigure 12: The regularizer significantly\nimproves the stability of the simulation.\n\nExtending PlasticityNet to support 3D simulation is straightforward. We only need to increase the\ndimension of the inputs to the PlasticityNet. To improve the expressiveness of the network, we also\nincrease the dimension of hidden variables. Here we demonstrate the 3D versions of our 2D examples\nwith similar physical parameters in Figure 13: 3D sand plasticity, 3D snow plasticity, and 3D metal\nplasticity. The 3D metal is simulated with \u2206t = 10\u22122, and for sand and snow, we use \u2206t = 10\u22123s\nto satisfy the CFL condition [8] in MPM, preventing the particles from traveling farther than the grid\ncell spacing in a single time step.\n\n", "conclusion": "\n\nWe proposed PlasticityNet, a neural network-based elastoplastic model learning framework that is\nagnostic to spatial discretizations. PlasticityNet represents the elastoplastic forces as the positional\n\n9\n\n3D Sand3D Snow3D MetalNon-regularizedNon-regularizedRegularizedRegularized\fgradients of learned potential energies, so that optimization time integration could be applied to\nachieve robust and efficient simulation at large time step sizes. We demonstrated that low-level\ncomponents in traditional physical simulation frameworks can be substituted with neural networks\nto obtain desired numerical properties that benefit the computation. Notably, this also avoids\ntedious analytical derivations or expensive nonlinear root-findings without significantly sacrificing the\naccuracy. We believe our work can inspire more research that applies machine learning to physical\nsimulation in the bottom-up style, maintaining fundamental physical properties and applicability to\ngeneral scenarios.\n\nLimitations and Future Work There are several limitations of our framework. (1) We cannot\nguarantee our fixed-point iteration will converge for arbitrary scenes. It is theoretically valuable to\nexplore under what conditions the fixed-point can converge and what loss functions can accelerate\nthe convergence. (2) Although the regularizer added during the simulation improves the stability\nof the simulation without changing the solution at convergence, it may introduce some artificial\nviscosity because the regularized energy penalizes deformations away from F0. Running more\nfixed-point iterations can alleviate this issue. It will also be interesting to explore adaptive weighting\nmechanisms for the regularizer, or convert this soft regularizer into a hard constraint. (3) We do\nnot consider the Hessian of the learned plastic energy in our training. Since we use second-order\nmethods to perform optimization time integration, the properties of the Hessian matrices may have an\nimpact on the convergence of the optimization method. Although the Jacobian matrices of the target\ngradients are asymmetric, it may be helpful if the Hessian of our learned elastoplastic energy can\napproximate them so that the stiffness of the material can be more accurately resolved. (4) Principled\nphysical assumptions of the learned potential energies by PlasticityNet, such as lower-boundedness\nand convexity, are not enforced. It is interesting to explore whether enforcing these energy properties\nwould positively influence the convergence of the optimizations and fixed-point iterations. (5) A\ntrained PlasticityNet can be directly re-scaled to accommodate a different Young\u2019s modulus, but it\nneeds to be re-trained for materials with different Poisson\u2019s ratio or plasticity parameters. It is an\nimportant future work to let our model more easily generalize to different parameters. For example,\nthese parameters can become extra inputs to the neural network. The generalized energy can also be\nintegrated into differentiable simulators [16, 43] to solve many inverse problems [38, 36, 32].\n\n", "appendix": "PlasticityNet: Learning to Simulate Metal, Sand, and\nSnow for Optimization Time Integration:\nSupplemental Document\n\nXuan Li\nDepartment of Mathematics\nUniversity of California, Los Angeles\nxuanli1@math.ucla.edu\n\nYadi Cao\nDepartment of Computer Science\nUniversity of California, Los Angeles\nyadicao95@cs.ucla.edu\n\nMinchen Li\nDepartment of Mathematics\nUniversity of California, Los Angeles\nminchen@math.ucla.edu\n\nYin Yang\nSchool of Computing\nUniversity of Utah\nyin.yang@utah.edu\n\nCraig Schroeder\nDepartment of Computer Science and Engineering\nUniversity of California, Riverside\ncraigs@cs.ucr.edu\n\nChenfanfu Jiang\nDepartment of Mathematics\nUniversity of California, Los Angeles\ncffjiang@math.ucla.edu\n\nA Appendix\n\nA.1 Network Architecture\n\nAll our models are using the Multilayer Perceptron (MLP) architecture with Swiss activation functions\n(x sigmoid(x)) except the output layer. They are trained using ADAM optimizer with the same\nparameters: initial learning rate \u03b1 = 0.01, decay rate \u03b3 = 0.95, decay step 1000. The dataset is\ngenerated during the training process with random sampling, and the batch size is 216 for all cases.\nThe models are all trained with 20000 epochs. The detailed architectures for each model is listed in\nTable 1.\n\nTable 1: Network Architectures and Training Details\n\nModel\nSand (StVK+Drucker-Prager)\nSnow (Neohooken+NACC)\nMetal (StVK+von-Mises)\nSand 3D\nMetal 3D (StVK+von-Mises)\nSnow 3D\n\nMLP layers\n[8,32,32,32,1]\n[9,32,32,32,1]\n[9,32,32,32,1]\n[18,64,64,64,1]\n[19,64,64,64,1]\n[19,64,64,64,1]\n\nA.2 Technical Details on Plasticity Models\n\nWe focus on isotropic materials, where the elasticity and plasticity can both be described in the\ndiagonal space without loss of generality. Given the polar singular value decomposition of the\ndeformation gradient F = U Diag(\u03a3)V\u22a4, the Kirchhoff stress \u03c4 and the return mapping Z can both\nbe computed solely by \u03a3 as \u03c4 \u03a3 and Z \u03a3, and then restored to the full space via \u03c4 = U Diag(\u03c4 \u03a3)V\u22a4\n\n36th Conference on Neural Information Processing Systems (NeurIPS 2022).\n\n\fand Z = U Diag(Z \u03a3)V\u22a4. In the following sections, we will omit the superscript \u03a3 and only discuss\nthe models in the diagonal space.\n\nHere is a list of the material parameters that will be mentioned in the following sections:\n\nNotation Meaning\nE\n\u03bd\n\u00b5\n\u03bb\nK\n\nYoung\u2019s modulus\nPoisson\u2019s ratio\nShear modulus\nLam\u00e9 modulus\nBulk modulus\n\nRelation to (E, \u03bd)\n/\n/\n\u00b5 = E\n\u03bb =\nK = E\n\n2(1+\u03bd)\nE\u03bd\n(1+\u03bd)(1\u22122\u03bd)\n\n3(1\u22122\u03bd)\n\nA.2.1 Sand Plasticity\n\nWe use StVK elasticity and Drucker-Prager plasticity for sand simulations [1].\n\nThe Kirchhoff stress \u03c4 of StVK elasticity is defined as\n\n\u03f5 = log(\u03a3),\n\u03c4 = 2\u00b5\u03f5 + \u03bb sum(\u03f5)1.\n\n(1)\n\nThe elastic region is characterised in the stress space as:\n\n\u03b1 sum(\u03c4 ) + \u2225 sum(\u03c4 ) \u2212\n\nsum(\u03c4 )\nd\n\n1\u2225 \u2264 0,\n\n(2)\n\n 2\n3\n\n2 sin \u03d5f\nwhere \u03b1 =\n3\u2212sin \u03d5f\nexamples, \u03d5f is set to \u03c0\nshown in Figure 1.\n\nand \u03d5f is the friction angle. In our sand\n6 . The elastic region in the stress space is\n\nThe return mapping for the Drucker-Prager plasticity is\n\nZ(\u03a3) =\n\n\uf8f1\n1\n\uf8f4\uf8f2\n\u03a3\nexp (\u03f5 \u2212 \u03b4\u03b3 \u02c6\u03f5\n\n\uf8f4\uf8f3\n\n\u2225\u02c6\u03f5\u2225 )\n\nsum(\u03f5) > 0\n\u03b4\u03b3 \u2264 0, and sum(\u03f5) \u2264 0\notherwise\n\n,\n\n(3)\n\nFigure 1: Drucker-Prager plas-\nticity\u2019s elastic region in the\nstress space.\n\nwhere \u03b4\u03b3 = \u2225\u02c6\u03f5\u2225 + \u03b1 (d\u03bb+2\u00b5) sum(\u03f5)\n\n2\u00b5\n\n.\n\nA.2.2 Snow Plasticity\n\nWe use neo-Hookean elasticity and non-associative Cam-Clay (NACC) plasticity for snow simulations\n[2].\n\nThe Kirchhoff stress of neo-Hookean elasticity is\n\nJ = det Diag(\u03a3),\nb = \u03a32,\n\nb = dev(b) = b \u2212\n\n\u03c4 = \u00b5J \u2212 2\n\nd b +\n\nK\n2\n\n1,\n\nsum(b)\nd\n(J 2 \u2212 1)1.\n\nThe elastic region of NACC is characterized by\n\ny(p, q) = q2(1 + 2\u03b2) + M 2(p + \u03b2p0)(p \u2212 p0) \u2264 0,\n\nwhere\n\n2\n\n(4)\n\n(5)\n\n\f\n\n6 \u2212 d\n2\n\n 2\n3\n\n2 sin \u03d5f\n3 \u2212 sin \u03d5f\n\nM = d\n\np =\n\nK\n2\n\n(J 2 \u2212 1),\n\n\n6 \u2212 d\n2\n\nq = \u00b5J \u2212 2\n\nd\n\n(6)\n\n\u2225b\u2225,\n\np0 = K sinh(\u03be max{\u2212\u03b1, 0}).\n\n\u03be, \u03b2, \u03d5f are the parameters of plasticity and \u03b1 is the hardening state.\nThe elastic region in the stress space is shown in Figure 2. In our\nsnow examples, \u03be = 0.5, \u03b2 = 0.3 and \u03d5f = \u03c0\n4 .\nThe return mapping is defined as\n\nFigure 2: NACC plasticity\u2019s\nelastic region in the stress\nspace.\n\nK )\u2212 1\nK )\u2212 1\n\n2d 1,\n2d 1,\n\nZ(\u03a3) =\n\n\uf8f1\n\n\uf8f4\uf8f4\uf8f4\uf8f4\uf8f2\n\uf8f4\uf8f4\uf8f4\uf8f4\uf8f3\n\n(1 \u2212 2pmax\n(1 + 2pmin\n\u03a3,\nJ \u2212 2\n\u00b5\n\nd\n\n \u22122M 2(p+\u03b2p0)(p\u2212p0)\n(6\u2212d)(1+2\u03b2)\n\np > pmax = p0,\np < pmin = \u2212\u03b2p0,\ny(p, q) \u2264 0,\n\nb\n\u2225b\u2225\n\n+ 1\n\nd sum(b)1 Otherwise\n\n(7)\n\nPlease refer to [2] for the hardening state update procedure, which is\ncontrolled by the simulator. For PlasticityNet, we set h = min{\u03b1, 0} as the hardening state input.\nDuring the training, we sample h \u2208 [\u22120.5, 0] for 2D snow and h \u2208 [\u22121, 0] for 3D snow.\n\nA.2.3 Metal Plasticity under StVK Elasticity\n\nWe use StVK elasticity and von-Mises plasticity for metal simulations [1]. This combination provides\na closed-form return mapping projection.\n\nThe elastic region is characterized by\n\n\u2225\u03c4 \u2212\n\n1\nd\n\nsum(\u03c4 )\u2225 \u2212 \u03c4y \u2264 0,\n\n(8)\n\nwhere \u03c4y controls the radius of the yield surface in the stress space\n(Figure 3).\n\nThe return mapping for the von-Mises plasticity is defined as\n\n\n\nZ(\u03a3) =\n\n\u03a3,\nexp (\u03f5 \u2212 \u03b4\u03b3 \u02c6\u03f5\n\n\u2225\u03c4 \u2212 1\n\nd sum(\u03c4 )\u2225 \u2212 \u03c4y \u2264 0\n\n,\n\n(9)\n\n\u2225\u02c6\u03f5\u2225 ), Otherwise\n\nwhere \u03b4\u03b3 = \u2225\u02c6\u03f5\u2225F \u2212 \u03c4y\n2\u00b5 .\n\nUnder hardening, \u03c4Y is updated with\n\n\u03c4 n+1\nY = \u03c4 n\n\nY + 2\u00b5\u03be\u03b4\u03b3,\n\n(10)\n\nFigure 3: Von-Mises plastic-\nity\u2019s elastic region in the stress\nspace.\n\nwhere \u03be is the hardening coefficient.\nWe use h = \u03c4Y\nfrom [0, 1].\n\n2\u00b5 as the hardening state input to our PlasticityNet. During the training, h is sampled\n\nA.2.4 Metal Plasticity under Neo-Hookean Elasticity\n\nThe combination of neo-Hookean elasticity and von-Mises plasticity does not have a closed-form\nreturn mapping, we thereby use this combination for the task of learning metal plasticity return\nmapping. The Kirchhoff stress of neo-Hookean elasticity is given by\n\n\u03c4 = \u00b5(\u03a32 \u2212 1) + \u03bb log J1.\n\n(11)\n\n3\n\n\fThe implicit representation of the elastic region we used in the training of the return mapping is given\nby\n\nsum(\u03c4 )\u22252 \u2212 (2\u00b5h)2.\n\n(12)\n\nDuring training, h is sampled from [0, 1].\n\ny(\u03a3, h) = \u2225\u03c4 \u2212\n\nReferences\n\n1\nd\n\n[1] G. Kl\u00e1r, T. Gast, A. Pradhana, C. Fu, C. Schroeder, C. Jiang, and J. Teran. Drucker-prager\nelastoplasticity for sand animation. ACM Transactions on Graphics (TOG), 35(4):1\u201312, 2016.\n\n[2] J. Wolper, Y. Fang, M. Li, J. Lu, M. Gao, and C. Jiang. Cd-mpm: continuum damage material\npoint methods for dynamic fracture animation. ACM Transactions on Graphics (TOG), 38(4):1\u2013\n15, 2019.\n\n4\n\n\f", "system_prompts": [{"role": "system", "content": "You are a computer science researcher currently reviewing a paper titled \" PlasticityNet: Learning to Simulate Metal, Sand, and Snow for Optimization Time Integration\" for the NeurIPS computer science conference. Your goal is to try to be as objective and truthful as possible in your answers about the paper provided. Your reviews will be used for causal reasoning in determining the quality of the paper."}], "prompts": {"1b": {"role": "user", "content": "The following is the conclusion section of the paper you are reviewing:\n\n\nWe proposed PlasticityNet, a neural network-based elastoplastic model learning framework that is\nagnostic to spatial discretizations. PlasticityNet represents the elastoplastic forces as the positional\n\n9\n\n3D Sand3D Snow3D MetalNon-regularizedNon-regularizedRegularizedRegularized\fgradients of learned potential energies, so that optimization time integration could be applied to\nachieve robust and efficient simulation at large time step sizes. We demonstrated that low-level\ncomponents in traditional physical simulation frameworks can be substituted with neural networks\nto obtain desired numerical properties that benefit the computation. Notably, this also avoids\ntedious analytical derivations or expensive nonlinear root-findings without significantly sacrificing the\naccuracy. We believe our work can inspire more research that applies machine learning to physical\nsimulation in the bottom-up style, maintaining fundamental physical properties and applicability to\ngeneral scenarios.\n\nLimitations and Future Work There are several limitations of our framework. (1) We cannot\nguarantee our fixed-point iteration will converge for arbitrary scenes. It is theoretically valuable to\nexplore under what conditions the fixed-point can converge and what loss functions can accelerate\nthe convergence. (2) Although the regularizer added during the simulation improves the stability\nof the simulation without changing the solution at convergence, it may introduce some artificial\nviscosity because the regularized energy penalizes deformations away from F0. Running more\nfixed-point iterations can alleviate this issue. It will also be interesting to explore adaptive weighting\nmechanisms for the regularizer, or convert this soft regularizer into a hard constraint. (3) We do\nnot consider the Hessian of the learned plastic energy in our training. Since we use second-order\nmethods to perform optimization time integration, the properties of the Hessian matrices may have an\nimpact on the convergence of the optimization method. Although the Jacobian matrices of the target\ngradients are asymmetric, it may be helpful if the Hessian of our learned elastoplastic energy can\napproximate them so that the stiffness of the material can be more accurately resolved. (4) Principled\nphysical assumptions of the learned potential energies by PlasticityNet, such as lower-boundedness\nand convexity, are not enforced. It is interesting to explore whether enforcing these energy properties\nwould positively influence the convergence of the optimizations and fixed-point iterations. (5) A\ntrained PlasticityNet can be directly re-scaled to accommodate a different Young\u2019s modulus, but it\nneeds to be re-trained for materials with different Poisson\u2019s ratio or plasticity parameters. It is an\nimportant future work to let our model more easily generalize to different parameters. For example,\nthese parameters can become extra inputs to the neural network. The generalized energy can also be\nintegrated into differentiable simulators [16, 43] to solve many inverse problems [38, 36, 32].\n\n\n\nBased on the section(s), please answer the following question with yes, no, or n/a and provide a brief justification for your answer.\nQuestion: Do the authors describe the limitations of their work?"}, "3a": {"role": "user", "content": "The following is the experiments section of the paper you are reviewing:\n\n\nWe show examples to demonstrate the capability of our PlasticityNet in learning versatile plasticity\nmodels. Our physical simulators are implemented using C++, and we applied PyTorch to learn the\npotential energies, which are then loaded into our simulators with TorchScript. All our potential\nenergies are trained as multilayer perceptrons using the Adam optimizer [22] on a single Nvidia RTX\n3090 GPU. Please see Appendix A.1 for more training details. All ground-truth data are generated\nusing standard explicit time integration with analytical plasticity returning mapping under small time\nstep sizes for stability. With our PlasticityNet, we can robustly simulate elastoplastic behaviors with\nmuch larger time step sizes using optimization time integrators.\n\n5.1 Training\n\nThe training of PlasticityNet only requires the return mapping (either given analytically or pre-trained)\nfor the plasticity model and the Kirchhoff stress for the underlying elasticity model. There is no need\nfor extra labeled data. At each epoch, we will sample a new batch of (F, F0, h). The sampling of\ndeformation gradients is based on its singular value decomposition F = U Diag(\u03a3)V\u22a4, with U, V\nbeing two rotation matrices. To sample F and F0 so that their singular values are close to each other,\nwe set F0 = R1 Diag(e\u03f5)R2 and F = R3 Diag(e\u03f5+\u03b4\u03f5)R4, where \u03f5 is a randomly sampled vector, \u03b4\u03f5\nis a random perturbation, and Ri\u2019s are randomly sampled rotation matrices. The hardening state is\nsampled uniformly from an appropriate range depending on the plasticity model. Please see Appendix\nA.2 for definitions of hardening states and their range selections. In this work, we uniformly sample\n\u03f5 from [\u22121, 1]d, \u03b4\u03f5 from [\u22120.1, 0.1]d for sand plasticity and metal plasticity, and [\u22120.2, 0.2]d for the\nsnow plasticity. The training loss curves of our 2D models are shown in Figure 4.\n\n5.2 Testing on 2D Simulations\n\nIn this section, explicit time integrators are used to generate the ground-truth data for the validation\nof the optimization time integrators with PlasticityNet on multiple 2D experiments. The quantitative\ncomparisons are plotted in Figure 5. We additionally include the computational costs in Table 1. We\n\n6\n\nSandSnow02500500075001000012500150001750020000Epoch102101100101102Traning LossMetal\f(a)\n\n(b)\n\n(c)\n\nFigure 5: (a) (b) The intersection-over-union (IOU) [17] measure between the ground truth and our\nresults. The IOUs are computed using the mass distributions on the MPM grid. (c) The average FEM\nnodal position difference. Note that the bounding box of the 2D metal frame is 0.1m \u00d7 0.18m.\n\nTable 1: Computational costs of 2D experiments.\nOurs\n\nExplicit\n\nExperiment\n\nSand\nSnow\nVon-Mises Metal\nNeohookean Metal\nMPM-FEM Coupling\n\nTime step (s)\n1e-3\n1e-3\n1e-2\n1e-2\n1e-3\n\ns/frame\n12.58\n35.56\n1.08\n1.03\n38.90\n\nTime step (s)\n1e-5\n1e-5\n1e-5\n1e-5\n1e-6\n\ns/frame\n6.20\n6.78\n5.39\n7.88\n184.58\n\nremark that the main objective of our work is not to surpass the performance of the existing simulation\nof every constitutive model, but to provide a methodology that enables the usage of implicit plasticity\nin an optimization time integration framework.\n\nSand Plasticity We start by learning the elastoplas-\ntic model of dry sand (Figure 6). The model com-\nbination is St. Venant-Kirchhoff (StVK) elasticity,\nand the closed-form Drucker Prager plasticity return\nmapping [23] (See Appendix A.2.1). In this example,\nwe simulate a column of sand falling onto the ground\nunder gravity with MPM. Our method generates vi-\nsually identical results compared to the ground truth,\nboth with the same time step size and a 100\u00d7 larger\ntime step size. The quantitative comparison between\nour results and the ground truth is shown in Figure 5a.\nNote that there is no hardening mechanism in this\nplasticity model, so our PlasticityNet does not need the hardening state in its input.\n\nFigure 6: Sand plasticity.\n\nSnow Plasticity with Hardening Snow is an\nelastoplastic material that can become stiffer under\ncompression. Essentially, this is the effect of hard-\nening where its elastic region get expanded. The\nvariation in the stiffness across the snow body makes\nit easily fracture. Here we simulate a snowball hitting\nthe ground in the MPM simulator (Figure 7). We use\nNeo-Hookean elasticity with the closed-form non-\nassociative Cam-Clay plasticity return mapping [15]\n(See Appendix A.2.2). Our method generates similar\nresults compared to the ground truth when using the\nsame time step size. The quantitative comparison of\nour results and the ground truth is shown in Figure 5b. Our framework remains stable even under\nmuch larger time step sizes. However, more numerical damping artifacts are introduced as the time\nstep size increases, which results in slightly different behaviors compared to the ground truth.\n\nFigure 7: Snow plasticity with hardening.\n\n7\n\nSand0.00.20.40.60.81.0Simulation Time [s]0.750.800.850.900.951.00IoUSnowMetalOurs (dt = 1e-5s) Ground truth (dt = 1e-5s) Ours (dt = 1e-3s) Ours (dt = 1e-5s) Ground truth (dt = 1e-5s) Ours (dt = 1e-3s) \fMetal Plasticity with Hardening Metal is another com-\nmon plastic material with hardening. In this example, we\ntrain PlasticityNet to learn metal plasticity with the StVK\nelasticity and the closed-form von-Mises plasticity return\nmapping [39]. (See Appendix A.2.3) We simulate a metal\nframe compressed by a rigid plate in the FEM simulator\n(Figure 8), where the Incremental Potential Contact (IPC)\n[29] is used to handle the frictional contact between the\nsolids. When we run the explicit time integration to gen-\nerate ground truth, we have to decrease Young\u2019s modulus\nto enable using large enough time step sizes so that the\nsimulation can be finished in practical time. Our method\nwith the original setting generates visually identical re-\nsults using a much large time step size. The quantitative\ncomparison of our result and the ground truth is shown in\nFigure 5c.\n\nFigure 8: Metal plasticity with harden-\ning.\n\nMetal Plasticity Return Mapping Here we show an\nexample simulated using PlasticityNet with a learned von-\nMises plasticity return mapping. The underlying elasticity\nis neo-Hookean, instead of the StVK model in the last ex-\nample (See Appendix A.2.4). Note that for Neo-Hookean\nmaterial, there is no closed-form solution available for\nthe von-Mises return mapping. In this case, a nonlinear\noptimization problem will need to be solved to perform the return mapping for every element/particle\nin every time step, which could severely slow down the standard explicit time integration. Using\nthe same parameters as the metal compression experiments above, we show that PlasticityNet with\nlearned plasticity return mapping under neo-Hookean elasticity can generate qualitatively similar\nresults (Figure 9) to those from PlasticityNet with closed-form return mapping under the StVK\nelasticity.\n\nFigure 9: Learned metal plasticity return\nmapping with neo-Hookean elasticity.\n\nMPM-FEM Coupling PlasticityNet enables the sim-\nulation of plastic materials in the MPM-FEM coupling\nframework BFEMP [33], where only pure elasticity was\nsupported. When simulating with explicit BFEMP, the\ntime step size required by stability is the minimum be-\ntween MPM step size upperbound and FEM step size\nupperbound. Here we show an example where a stiff FEM\nelastic body falls onto MPM sand (Figure 10), where the\nimplicit BFEMP can use a time step size 1000x larger than\nthe explicit BFEMP and achieves an approximately 5x\nspeedup in wall-clock time. We also remark that when the time step size is small (as is required\nto keep the explicit time integration stable in this case), MPM suffers from excessive numerical\ndamping due to the significant amount of particle-grid transfers. This is a known issue of explicit\nMPM simulations.\n\nFigure 10: Two-way coupling between\nFEM elasticity and MPM sand plasticity.\n\nDifferent Energy Representations Here we include some different energy representations we\ninvestigated (Figure 11), whose inaccurate results motivated us to develop our final representation\nEquation 8. These experiments are all conducted on the 2D sand column collapse example. The\nfirst straightforward idea is to find a globally defined neural energy function \u03a8(F) = \u03a8\u03b8(F) that\nsolves Equation 6, where \u03b8 is the parameter of the neural network. Note that it is theoretically\nunachievable to train a global potential energy function because the right hand side of Equation 6 is not\nintegrable in the plastic region. But it is still worth trying to explore an approximation by minimizing\nL(\u03b8) = EF\n. However, the experiment shows that this formulation makes\nthe sand column behave like an elastic body. It is also noteworthy that the sand column cannot even\nmaintain the rest shape at the first frame: it erroneously shrinks suddenly and jumps off the ground.\nAdditional insight is provided by realizing that a linear correction is necessary to exactly vanish stress\nwhen the deformation gradient is the identity; so we experiment with \u03a8(F) = \u03a8\u03b8(F) \u2212 \u2207F\u03a8\u03b8(I).\n\n\u2202F (F) \u2212 \u03c4 (Z(F))F\u2212\u22a4(cid:13)\n\n(cid:13)\n(cid:13)\n(cid:13)\n\n\u2202\u03a8\u03b8\n\n(cid:13)\n(cid:13)\n\nF\n\n2\n\n8\n\nOurs (E = 1e7 Pa, dt = 1e-5s) Ground truth (E = 1e7 Pa, dt = 1e-5s) Ours (E = 1e10 Pa, dt = 1e-2s) Ours (dt = 1e-3s) Explicit (dt = 1e-6s) \fFigure 11: Ablation studies on different energy representations.\n\nFigure 13: 3D simulations with sand plasticity, snow palsticity and metal plasticity.\n\nThis formulation unfortunately also leads to an insufficient capture of plasticity, giving an elastic and\nvisually distinct incorrect result. These observations motivate us to investigate a family of potential\nenergies to solve Equation 6 locally. We first use \u03a8(F, F0) = \u03a8\u03b8(F, F0) \u2212 \u2207F\u03a8\u03b8(I, F0) and train\nwith the loss function in Equation 9. The simulation captures certain plastic behaviors when the\ndeformation is small, but the result quickly deviates from the ground truth when the deformation\nbecomes larger. Finally, we come up with Equation 8 to achieve the nice results in Figure 6.\n\n5.3 Ablation Studies\n\nStability Regularizer As an ablation study for the stabil-\nity regularizer in Equation 11, we compare the simulations\nwith and without the regularizer on two 2D examples (Fig-\nure 12). Without the regularizer, the metal frame can not\neven stay in its original rest configuration after the first\ntime step. In the sand example, particles in the highlighted\nregions tend to separate from the sand column in a non-\nphysical manner. These demonstrate that our regularizer\nsignificantly improves the stability of the simulation.\n\n5.4 Testing on 3D Simulations\n\nFigure 12: The regularizer significantly\nimproves the stability of the simulation.\n\nExtending PlasticityNet to support 3D simulation is straightforward. We only need to increase the\ndimension of the inputs to the PlasticityNet. To improve the expressiveness of the network, we also\nincrease the dimension of hidden variables. Here we demonstrate the 3D versions of our 2D examples\nwith similar physical parameters in Figure 13: 3D sand plasticity, 3D snow plasticity, and 3D metal\nplasticity. The 3D metal is simulated with \u2206t = 10\u22122, and for sand and snow, we use \u2206t = 10\u22123s\nto satisfy the CFL condition [8] in MPM, preventing the particles from traveling farther than the grid\ncell spacing in a single time step.\n\n\n\nThe following is the appendix section of the paper you are reviewing:\nPlasticityNet: Learning to Simulate Metal, Sand, and\nSnow for Optimization Time Integration:\nSupplemental Document\n\nXuan Li\nDepartment of Mathematics\nUniversity of California, Los Angeles\nxuanli1@math.ucla.edu\n\nYadi Cao\nDepartment of Computer Science\nUniversity of California, Los Angeles\nyadicao95@cs.ucla.edu\n\nMinchen Li\nDepartment of Mathematics\nUniversity of California, Los Angeles\nminchen@math.ucla.edu\n\nYin Yang\nSchool of Computing\nUniversity of Utah\nyin.yang@utah.edu\n\nCraig Schroeder\nDepartment of Computer Science and Engineering\nUniversity of California, Riverside\ncraigs@cs.ucr.edu\n\nChenfanfu Jiang\nDepartment of Mathematics\nUniversity of California, Los Angeles\ncffjiang@math.ucla.edu\n\nA Appendix\n\nA.1 Network Architecture\n\nAll our models are using the Multilayer Perceptron (MLP) architecture with Swiss activation functions\n(x sigmoid(x)) except the output layer. They are trained using ADAM optimizer with the same\nparameters: initial learning rate \u03b1 = 0.01, decay rate \u03b3 = 0.95, decay step 1000. The dataset is\ngenerated during the training process with random sampling, and the batch size is 216 for all cases.\nThe models are all trained with 20000 epochs. The detailed architectures for each model is listed in\nTable 1.\n\nTable 1: Network Architectures and Training Details\n\nModel\nSand (StVK+Drucker-Prager)\nSnow (Neohooken+NACC)\nMetal (StVK+von-Mises)\nSand 3D\nMetal 3D (StVK+von-Mises)\nSnow 3D\n\nMLP layers\n[8,32,32,32,1]\n[9,32,32,32,1]\n[9,32,32,32,1]\n[18,64,64,64,1]\n[19,64,64,64,1]\n[19,64,64,64,1]\n\nA.2 Technical Details on Plasticity Models\n\nWe focus on isotropic materials, where the elasticity and plasticity can both be described in the\ndiagonal space without loss of generality. Given the polar singular value decomposition of the\ndeformation gradient F = U Diag(\u03a3)V\u22a4, the Kirchhoff stress \u03c4 and the return mapping Z can both\nbe computed solely by \u03a3 as \u03c4 \u03a3 and Z \u03a3, and then restored to the full space via \u03c4 = U Diag(\u03c4 \u03a3)V\u22a4\n\n36th Conference on Neural Information Processing Systems (NeurIPS 2022).\n\n\fand Z = U Diag(Z \u03a3)V\u22a4. In the following sections, we will omit the superscript \u03a3 and only discuss\nthe models in the diagonal space.\n\nHere is a list of the material parameters that will be mentioned in the following sections:\n\nNotation Meaning\nE\n\u03bd\n\u00b5\n\u03bb\nK\n\nYoung\u2019s modulus\nPoisson\u2019s ratio\nShear modulus\nLam\u00e9 modulus\nBulk modulus\n\nRelation to (E, \u03bd)\n/\n/\n\u00b5 = E\n\u03bb =\nK = E\n\n2(1+\u03bd)\nE\u03bd\n(1+\u03bd)(1\u22122\u03bd)\n\n3(1\u22122\u03bd)\n\nA.2.1 Sand Plasticity\n\nWe use StVK elasticity and Drucker-Prager plasticity for sand simulations [1].\n\nThe Kirchhoff stress \u03c4 of StVK elasticity is defined as\n\n\u03f5 = log(\u03a3),\n\u03c4 = 2\u00b5\u03f5 + \u03bb sum(\u03f5)1.\n\n(1)\n\nThe elastic region is characterised in the stress space as:\n\n\u03b1 sum(\u03c4 ) + \u2225 sum(\u03c4 ) \u2212\n\nsum(\u03c4 )\nd\n\n1\u2225 \u2264 0,\n\n(2)\n\n 2\n3\n\n2 sin \u03d5f\nwhere \u03b1 =\n3\u2212sin \u03d5f\nexamples, \u03d5f is set to \u03c0\nshown in Figure 1.\n\nand \u03d5f is the friction angle. In our sand\n6 . The elastic region in the stress space is\n\nThe return mapping for the Drucker-Prager plasticity is\n\nZ(\u03a3) =\n\n\uf8f1\n1\n\uf8f4\uf8f2\n\u03a3\nexp (\u03f5 \u2212 \u03b4\u03b3 \u02c6\u03f5\n\n\uf8f4\uf8f3\n\n\u2225\u02c6\u03f5\u2225 )\n\nsum(\u03f5) > 0\n\u03b4\u03b3 \u2264 0, and sum(\u03f5) \u2264 0\notherwise\n\n,\n\n(3)\n\nFigure 1: Drucker-Prager plas-\nticity\u2019s elastic region in the\nstress space.\n\nwhere \u03b4\u03b3 = \u2225\u02c6\u03f5\u2225 + \u03b1 (d\u03bb+2\u00b5) sum(\u03f5)\n\n2\u00b5\n\n.\n\nA.2.2 Snow Plasticity\n\nWe use neo-Hookean elasticity and non-associative Cam-Clay (NACC) plasticity for snow simulations\n[2].\n\nThe Kirchhoff stress of neo-Hookean elasticity is\n\nJ = det Diag(\u03a3),\nb = \u03a32,\n\nb = dev(b) = b \u2212\n\n\u03c4 = \u00b5J \u2212 2\n\nd b +\n\nK\n2\n\n1,\n\nsum(b)\nd\n(J 2 \u2212 1)1.\n\nThe elastic region of NACC is characterized by\n\ny(p, q) = q2(1 + 2\u03b2) + M 2(p + \u03b2p0)(p \u2212 p0) \u2264 0,\n\nwhere\n\n2\n\n(4)\n\n(5)\n\n\f\n\n6 \u2212 d\n2\n\n 2\n3\n\n2 sin \u03d5f\n3 \u2212 sin \u03d5f\n\nM = d\n\np =\n\nK\n2\n\n(J 2 \u2212 1),\n\n\n6 \u2212 d\n2\n\nq = \u00b5J \u2212 2\n\nd\n\n(6)\n\n\u2225b\u2225,\n\np0 = K sinh(\u03be max{\u2212\u03b1, 0}).\n\n\u03be, \u03b2, \u03d5f are the parameters of plasticity and \u03b1 is the hardening state.\nThe elastic region in the stress space is shown in Figure 2. In our\nsnow examples, \u03be = 0.5, \u03b2 = 0.3 and \u03d5f = \u03c0\n4 .\nThe return mapping is defined as\n\nFigure 2: NACC plasticity\u2019s\nelastic region in the stress\nspace.\n\nK )\u2212 1\nK )\u2212 1\n\n2d 1,\n2d 1,\n\nZ(\u03a3) =\n\n\uf8f1\n\n\uf8f4\uf8f4\uf8f4\uf8f4\uf8f2\n\uf8f4\uf8f4\uf8f4\uf8f4\uf8f3\n\n(1 \u2212 2pmax\n(1 + 2pmin\n\u03a3,\nJ \u2212 2\n\u00b5\n\nd\n\n \u22122M 2(p+\u03b2p0)(p\u2212p0)\n(6\u2212d)(1+2\u03b2)\n\np > pmax = p0,\np < pmin = \u2212\u03b2p0,\ny(p, q) \u2264 0,\n\nb\n\u2225b\u2225\n\n+ 1\n\nd sum(b)1 Otherwise\n\n(7)\n\nPlease refer to [2] for the hardening state update procedure, which is\ncontrolled by the simulator. For PlasticityNet, we set h = min{\u03b1, 0} as the hardening state input.\nDuring the training, we sample h \u2208 [\u22120.5, 0] for 2D snow and h \u2208 [\u22121, 0] for 3D snow.\n\nA.2.3 Metal Plasticity under StVK Elasticity\n\nWe use StVK elasticity and von-Mises plasticity for metal simulations [1]. This combination provides\na closed-form return mapping projection.\n\nThe elastic region is characterized by\n\n\u2225\u03c4 \u2212\n\n1\nd\n\nsum(\u03c4 )\u2225 \u2212 \u03c4y \u2264 0,\n\n(8)\n\nwhere \u03c4y controls the radius of the yield surface in the stress space\n(Figure 3).\n\nThe return mapping for the von-Mises plasticity is defined as\n\n\n\nZ(\u03a3) =\n\n\u03a3,\nexp (\u03f5 \u2212 \u03b4\u03b3 \u02c6\u03f5\n\n\u2225\u03c4 \u2212 1\n\nd sum(\u03c4 )\u2225 \u2212 \u03c4y \u2264 0\n\n,\n\n(9)\n\n\u2225\u02c6\u03f5\u2225 ), Otherwise\n\nwhere \u03b4\u03b3 = \u2225\u02c6\u03f5\u2225F \u2212 \u03c4y\n2\u00b5 .\n\nUnder hardening, \u03c4Y is updated with\n\n\u03c4 n+1\nY = \u03c4 n\n\nY + 2\u00b5\u03be\u03b4\u03b3,\n\n(10)\n\nFigure 3: Von-Mises plastic-\nity\u2019s elastic region in the stress\nspace.\n\nwhere \u03be is the hardening coefficient.\nWe use h = \u03c4Y\nfrom [0, 1].\n\n2\u00b5 as the hardening state input to our PlasticityNet. During the training, h is sampled\n\nA.2.4 Metal Plasticity under Neo-Hookean Elasticity\n\nThe combination of neo-Hookean elasticity and von-Mises plasticity does not have a closed-form\nreturn mapping, we thereby use this combination for the task of learning metal plasticity return\nmapping. The Kirchhoff stress of neo-Hookean elasticity is given by\n\n\u03c4 = \u00b5(\u03a32 \u2212 1) + \u03bb log J1.\n\n(11)\n\n3\n\n\fThe implicit representation of the elastic region we used in the training of the return mapping is given\nby\n\nsum(\u03c4 )\u22252 \u2212 (2\u00b5h)2.\n\n(12)\n\nDuring training, h is sampled from [0, 1].\n\ny(\u03a3, h) = \u2225\u03c4 \u2212\n\nReferences\n\n1\nd\n\n[1] G. Kl\u00e1r, T. Gast, A. Pradhana, C. Fu, C. Schroeder, C. Jiang, and J. Teran. Drucker-prager\nelastoplasticity for sand animation. ACM Transactions on Graphics (TOG), 35(4):1\u201312, 2016.\n\n[2] J. Wolper, Y. Fang, M. Li, J. Lu, M. Gao, and C. Jiang. Cd-mpm: continuum damage material\npoint methods for dynamic fracture animation. ACM Transactions on Graphics (TOG), 38(4):1\u2013\n15, 2019.\n\n4\n\n\f\n\nBased on the section(s), please answer the following question with yes, no, or n/a and provide a brief justification for your answer.\nQuestion: If the authors ran experiments, do the authors include the code, data, and instructions needed to reproduce the main experimental results (either in the supplemental material or as a URL)?"}, "3b": {"role": "user", "content": "The following is the experiments section of the paper you are reviewing:\n\n\nWe show examples to demonstrate the capability of our PlasticityNet in learning versatile plasticity\nmodels. Our physical simulators are implemented using C++, and we applied PyTorch to learn the\npotential energies, which are then loaded into our simulators with TorchScript. All our potential\nenergies are trained as multilayer perceptrons using the Adam optimizer [22] on a single Nvidia RTX\n3090 GPU. Please see Appendix A.1 for more training details. All ground-truth data are generated\nusing standard explicit time integration with analytical plasticity returning mapping under small time\nstep sizes for stability. With our PlasticityNet, we can robustly simulate elastoplastic behaviors with\nmuch larger time step sizes using optimization time integrators.\n\n5.1 Training\n\nThe training of PlasticityNet only requires the return mapping (either given analytically or pre-trained)\nfor the plasticity model and the Kirchhoff stress for the underlying elasticity model. There is no need\nfor extra labeled data. At each epoch, we will sample a new batch of (F, F0, h). The sampling of\ndeformation gradients is based on its singular value decomposition F = U Diag(\u03a3)V\u22a4, with U, V\nbeing two rotation matrices. To sample F and F0 so that their singular values are close to each other,\nwe set F0 = R1 Diag(e\u03f5)R2 and F = R3 Diag(e\u03f5+\u03b4\u03f5)R4, where \u03f5 is a randomly sampled vector, \u03b4\u03f5\nis a random perturbation, and Ri\u2019s are randomly sampled rotation matrices. The hardening state is\nsampled uniformly from an appropriate range depending on the plasticity model. Please see Appendix\nA.2 for definitions of hardening states and their range selections. In this work, we uniformly sample\n\u03f5 from [\u22121, 1]d, \u03b4\u03f5 from [\u22120.1, 0.1]d for sand plasticity and metal plasticity, and [\u22120.2, 0.2]d for the\nsnow plasticity. The training loss curves of our 2D models are shown in Figure 4.\n\n5.2 Testing on 2D Simulations\n\nIn this section, explicit time integrators are used to generate the ground-truth data for the validation\nof the optimization time integrators with PlasticityNet on multiple 2D experiments. The quantitative\ncomparisons are plotted in Figure 5. We additionally include the computational costs in Table 1. We\n\n6\n\nSandSnow02500500075001000012500150001750020000Epoch102101100101102Traning LossMetal\f(a)\n\n(b)\n\n(c)\n\nFigure 5: (a) (b) The intersection-over-union (IOU) [17] measure between the ground truth and our\nresults. The IOUs are computed using the mass distributions on the MPM grid. (c) The average FEM\nnodal position difference. Note that the bounding box of the 2D metal frame is 0.1m \u00d7 0.18m.\n\nTable 1: Computational costs of 2D experiments.\nOurs\n\nExplicit\n\nExperiment\n\nSand\nSnow\nVon-Mises Metal\nNeohookean Metal\nMPM-FEM Coupling\n\nTime step (s)\n1e-3\n1e-3\n1e-2\n1e-2\n1e-3\n\ns/frame\n12.58\n35.56\n1.08\n1.03\n38.90\n\nTime step (s)\n1e-5\n1e-5\n1e-5\n1e-5\n1e-6\n\ns/frame\n6.20\n6.78\n5.39\n7.88\n184.58\n\nremark that the main objective of our work is not to surpass the performance of the existing simulation\nof every constitutive model, but to provide a methodology that enables the usage of implicit plasticity\nin an optimization time integration framework.\n\nSand Plasticity We start by learning the elastoplas-\ntic model of dry sand (Figure 6). The model com-\nbination is St. Venant-Kirchhoff (StVK) elasticity,\nand the closed-form Drucker Prager plasticity return\nmapping [23] (See Appendix A.2.1). In this example,\nwe simulate a column of sand falling onto the ground\nunder gravity with MPM. Our method generates vi-\nsually identical results compared to the ground truth,\nboth with the same time step size and a 100\u00d7 larger\ntime step size. The quantitative comparison between\nour results and the ground truth is shown in Figure 5a.\nNote that there is no hardening mechanism in this\nplasticity model, so our PlasticityNet does not need the hardening state in its input.\n\nFigure 6: Sand plasticity.\n\nSnow Plasticity with Hardening Snow is an\nelastoplastic material that can become stiffer under\ncompression. Essentially, this is the effect of hard-\nening where its elastic region get expanded. The\nvariation in the stiffness across the snow body makes\nit easily fracture. Here we simulate a snowball hitting\nthe ground in the MPM simulator (Figure 7). We use\nNeo-Hookean elasticity with the closed-form non-\nassociative Cam-Clay plasticity return mapping [15]\n(See Appendix A.2.2). Our method generates similar\nresults compared to the ground truth when using the\nsame time step size. The quantitative comparison of\nour results and the ground truth is shown in Figure 5b. Our framework remains stable even under\nmuch larger time step sizes. However, more numerical damping artifacts are introduced as the time\nstep size increases, which results in slightly different behaviors compared to the ground truth.\n\nFigure 7: Snow plasticity with hardening.\n\n7\n\nSand0.00.20.40.60.81.0Simulation Time [s]0.750.800.850.900.951.00IoUSnowMetalOurs (dt = 1e-5s) Ground truth (dt = 1e-5s) Ours (dt = 1e-3s) Ours (dt = 1e-5s) Ground truth (dt = 1e-5s) Ours (dt = 1e-3s) \fMetal Plasticity with Hardening Metal is another com-\nmon plastic material with hardening. In this example, we\ntrain PlasticityNet to learn metal plasticity with the StVK\nelasticity and the closed-form von-Mises plasticity return\nmapping [39]. (See Appendix A.2.3) We simulate a metal\nframe compressed by a rigid plate in the FEM simulator\n(Figure 8), where the Incremental Potential Contact (IPC)\n[29] is used to handle the frictional contact between the\nsolids. When we run the explicit time integration to gen-\nerate ground truth, we have to decrease Young\u2019s modulus\nto enable using large enough time step sizes so that the\nsimulation can be finished in practical time. Our method\nwith the original setting generates visually identical re-\nsults using a much large time step size. The quantitative\ncomparison of our result and the ground truth is shown in\nFigure 5c.\n\nFigure 8: Metal plasticity with harden-\ning.\n\nMetal Plasticity Return Mapping Here we show an\nexample simulated using PlasticityNet with a learned von-\nMises plasticity return mapping. The underlying elasticity\nis neo-Hookean, instead of the StVK model in the last ex-\nample (See Appendix A.2.4). Note that for Neo-Hookean\nmaterial, there is no closed-form solution available for\nthe von-Mises return mapping. In this case, a nonlinear\noptimization problem will need to be solved to perform the return mapping for every element/particle\nin every time step, which could severely slow down the standard explicit time integration. Using\nthe same parameters as the metal compression experiments above, we show that PlasticityNet with\nlearned plasticity return mapping under neo-Hookean elasticity can generate qualitatively similar\nresults (Figure 9) to those from PlasticityNet with closed-form return mapping under the StVK\nelasticity.\n\nFigure 9: Learned metal plasticity return\nmapping with neo-Hookean elasticity.\n\nMPM-FEM Coupling PlasticityNet enables the sim-\nulation of plastic materials in the MPM-FEM coupling\nframework BFEMP [33], where only pure elasticity was\nsupported. When simulating with explicit BFEMP, the\ntime step size required by stability is the minimum be-\ntween MPM step size upperbound and FEM step size\nupperbound. Here we show an example where a stiff FEM\nelastic body falls onto MPM sand (Figure 10), where the\nimplicit BFEMP can use a time step size 1000x larger than\nthe explicit BFEMP and achieves an approximately 5x\nspeedup in wall-clock time. We also remark that when the time step size is small (as is required\nto keep the explicit time integration stable in this case), MPM suffers from excessive numerical\ndamping due to the significant amount of particle-grid transfers. This is a known issue of explicit\nMPM simulations.\n\nFigure 10: Two-way coupling between\nFEM elasticity and MPM sand plasticity.\n\nDifferent Energy Representations Here we include some different energy representations we\ninvestigated (Figure 11), whose inaccurate results motivated us to develop our final representation\nEquation 8. These experiments are all conducted on the 2D sand column collapse example. The\nfirst straightforward idea is to find a globally defined neural energy function \u03a8(F) = \u03a8\u03b8(F) that\nsolves Equation 6, where \u03b8 is the parameter of the neural network. Note that it is theoretically\nunachievable to train a global potential energy function because the right hand side of Equation 6 is not\nintegrable in the plastic region. But it is still worth trying to explore an approximation by minimizing\nL(\u03b8) = EF\n. However, the experiment shows that this formulation makes\nthe sand column behave like an elastic body. It is also noteworthy that the sand column cannot even\nmaintain the rest shape at the first frame: it erroneously shrinks suddenly and jumps off the ground.\nAdditional insight is provided by realizing that a linear correction is necessary to exactly vanish stress\nwhen the deformation gradient is the identity; so we experiment with \u03a8(F) = \u03a8\u03b8(F) \u2212 \u2207F\u03a8\u03b8(I).\n\n\u2202F (F) \u2212 \u03c4 (Z(F))F\u2212\u22a4(cid:13)\n\n(cid:13)\n(cid:13)\n(cid:13)\n\n\u2202\u03a8\u03b8\n\n(cid:13)\n(cid:13)\n\nF\n\n2\n\n8\n\nOurs (E = 1e7 Pa, dt = 1e-5s) Ground truth (E = 1e7 Pa, dt = 1e-5s) Ours (E = 1e10 Pa, dt = 1e-2s) Ours (dt = 1e-3s) Explicit (dt = 1e-6s) \fFigure 11: Ablation studies on different energy representations.\n\nFigure 13: 3D simulations with sand plasticity, snow palsticity and metal plasticity.\n\nThis formulation unfortunately also leads to an insufficient capture of plasticity, giving an elastic and\nvisually distinct incorrect result. These observations motivate us to investigate a family of potential\nenergies to solve Equation 6 locally. We first use \u03a8(F, F0) = \u03a8\u03b8(F, F0) \u2212 \u2207F\u03a8\u03b8(I, F0) and train\nwith the loss function in Equation 9. The simulation captures certain plastic behaviors when the\ndeformation is small, but the result quickly deviates from the ground truth when the deformation\nbecomes larger. Finally, we come up with Equation 8 to achieve the nice results in Figure 6.\n\n5.3 Ablation Studies\n\nStability Regularizer As an ablation study for the stabil-\nity regularizer in Equation 11, we compare the simulations\nwith and without the regularizer on two 2D examples (Fig-\nure 12). Without the regularizer, the metal frame can not\neven stay in its original rest configuration after the first\ntime step. In the sand example, particles in the highlighted\nregions tend to separate from the sand column in a non-\nphysical manner. These demonstrate that our regularizer\nsignificantly improves the stability of the simulation.\n\n5.4 Testing on 3D Simulations\n\nFigure 12: The regularizer significantly\nimproves the stability of the simulation.\n\nExtending PlasticityNet to support 3D simulation is straightforward. We only need to increase the\ndimension of the inputs to the PlasticityNet. To improve the expressiveness of the network, we also\nincrease the dimension of hidden variables. Here we demonstrate the 3D versions of our 2D examples\nwith similar physical parameters in Figure 13: 3D sand plasticity, 3D snow plasticity, and 3D metal\nplasticity. The 3D metal is simulated with \u2206t = 10\u22122, and for sand and snow, we use \u2206t = 10\u22123s\nto satisfy the CFL condition [8] in MPM, preventing the particles from traveling farther than the grid\ncell spacing in a single time step.\n\n\n\nThe following is the appendix section of the paper you are reviewing:\nPlasticityNet: Learning to Simulate Metal, Sand, and\nSnow for Optimization Time Integration:\nSupplemental Document\n\nXuan Li\nDepartment of Mathematics\nUniversity of California, Los Angeles\nxuanli1@math.ucla.edu\n\nYadi Cao\nDepartment of Computer Science\nUniversity of California, Los Angeles\nyadicao95@cs.ucla.edu\n\nMinchen Li\nDepartment of Mathematics\nUniversity of California, Los Angeles\nminchen@math.ucla.edu\n\nYin Yang\nSchool of Computing\nUniversity of Utah\nyin.yang@utah.edu\n\nCraig Schroeder\nDepartment of Computer Science and Engineering\nUniversity of California, Riverside\ncraigs@cs.ucr.edu\n\nChenfanfu Jiang\nDepartment of Mathematics\nUniversity of California, Los Angeles\ncffjiang@math.ucla.edu\n\nA Appendix\n\nA.1 Network Architecture\n\nAll our models are using the Multilayer Perceptron (MLP) architecture with Swiss activation functions\n(x sigmoid(x)) except the output layer. They are trained using ADAM optimizer with the same\nparameters: initial learning rate \u03b1 = 0.01, decay rate \u03b3 = 0.95, decay step 1000. The dataset is\ngenerated during the training process with random sampling, and the batch size is 216 for all cases.\nThe models are all trained with 20000 epochs. The detailed architectures for each model is listed in\nTable 1.\n\nTable 1: Network Architectures and Training Details\n\nModel\nSand (StVK+Drucker-Prager)\nSnow (Neohooken+NACC)\nMetal (StVK+von-Mises)\nSand 3D\nMetal 3D (StVK+von-Mises)\nSnow 3D\n\nMLP layers\n[8,32,32,32,1]\n[9,32,32,32,1]\n[9,32,32,32,1]\n[18,64,64,64,1]\n[19,64,64,64,1]\n[19,64,64,64,1]\n\nA.2 Technical Details on Plasticity Models\n\nWe focus on isotropic materials, where the elasticity and plasticity can both be described in the\ndiagonal space without loss of generality. Given the polar singular value decomposition of the\ndeformation gradient F = U Diag(\u03a3)V\u22a4, the Kirchhoff stress \u03c4 and the return mapping Z can both\nbe computed solely by \u03a3 as \u03c4 \u03a3 and Z \u03a3, and then restored to the full space via \u03c4 = U Diag(\u03c4 \u03a3)V\u22a4\n\n36th Conference on Neural Information Processing Systems (NeurIPS 2022).\n\n\fand Z = U Diag(Z \u03a3)V\u22a4. In the following sections, we will omit the superscript \u03a3 and only discuss\nthe models in the diagonal space.\n\nHere is a list of the material parameters that will be mentioned in the following sections:\n\nNotation Meaning\nE\n\u03bd\n\u00b5\n\u03bb\nK\n\nYoung\u2019s modulus\nPoisson\u2019s ratio\nShear modulus\nLam\u00e9 modulus\nBulk modulus\n\nRelation to (E, \u03bd)\n/\n/\n\u00b5 = E\n\u03bb =\nK = E\n\n2(1+\u03bd)\nE\u03bd\n(1+\u03bd)(1\u22122\u03bd)\n\n3(1\u22122\u03bd)\n\nA.2.1 Sand Plasticity\n\nWe use StVK elasticity and Drucker-Prager plasticity for sand simulations [1].\n\nThe Kirchhoff stress \u03c4 of StVK elasticity is defined as\n\n\u03f5 = log(\u03a3),\n\u03c4 = 2\u00b5\u03f5 + \u03bb sum(\u03f5)1.\n\n(1)\n\nThe elastic region is characterised in the stress space as:\n\n\u03b1 sum(\u03c4 ) + \u2225 sum(\u03c4 ) \u2212\n\nsum(\u03c4 )\nd\n\n1\u2225 \u2264 0,\n\n(2)\n\n 2\n3\n\n2 sin \u03d5f\nwhere \u03b1 =\n3\u2212sin \u03d5f\nexamples, \u03d5f is set to \u03c0\nshown in Figure 1.\n\nand \u03d5f is the friction angle. In our sand\n6 . The elastic region in the stress space is\n\nThe return mapping for the Drucker-Prager plasticity is\n\nZ(\u03a3) =\n\n\uf8f1\n1\n\uf8f4\uf8f2\n\u03a3\nexp (\u03f5 \u2212 \u03b4\u03b3 \u02c6\u03f5\n\n\uf8f4\uf8f3\n\n\u2225\u02c6\u03f5\u2225 )\n\nsum(\u03f5) > 0\n\u03b4\u03b3 \u2264 0, and sum(\u03f5) \u2264 0\notherwise\n\n,\n\n(3)\n\nFigure 1: Drucker-Prager plas-\nticity\u2019s elastic region in the\nstress space.\n\nwhere \u03b4\u03b3 = \u2225\u02c6\u03f5\u2225 + \u03b1 (d\u03bb+2\u00b5) sum(\u03f5)\n\n2\u00b5\n\n.\n\nA.2.2 Snow Plasticity\n\nWe use neo-Hookean elasticity and non-associative Cam-Clay (NACC) plasticity for snow simulations\n[2].\n\nThe Kirchhoff stress of neo-Hookean elasticity is\n\nJ = det Diag(\u03a3),\nb = \u03a32,\n\nb = dev(b) = b \u2212\n\n\u03c4 = \u00b5J \u2212 2\n\nd b +\n\nK\n2\n\n1,\n\nsum(b)\nd\n(J 2 \u2212 1)1.\n\nThe elastic region of NACC is characterized by\n\ny(p, q) = q2(1 + 2\u03b2) + M 2(p + \u03b2p0)(p \u2212 p0) \u2264 0,\n\nwhere\n\n2\n\n(4)\n\n(5)\n\n\f\n\n6 \u2212 d\n2\n\n 2\n3\n\n2 sin \u03d5f\n3 \u2212 sin \u03d5f\n\nM = d\n\np =\n\nK\n2\n\n(J 2 \u2212 1),\n\n\n6 \u2212 d\n2\n\nq = \u00b5J \u2212 2\n\nd\n\n(6)\n\n\u2225b\u2225,\n\np0 = K sinh(\u03be max{\u2212\u03b1, 0}).\n\n\u03be, \u03b2, \u03d5f are the parameters of plasticity and \u03b1 is the hardening state.\nThe elastic region in the stress space is shown in Figure 2. In our\nsnow examples, \u03be = 0.5, \u03b2 = 0.3 and \u03d5f = \u03c0\n4 .\nThe return mapping is defined as\n\nFigure 2: NACC plasticity\u2019s\nelastic region in the stress\nspace.\n\nK )\u2212 1\nK )\u2212 1\n\n2d 1,\n2d 1,\n\nZ(\u03a3) =\n\n\uf8f1\n\n\uf8f4\uf8f4\uf8f4\uf8f4\uf8f2\n\uf8f4\uf8f4\uf8f4\uf8f4\uf8f3\n\n(1 \u2212 2pmax\n(1 + 2pmin\n\u03a3,\nJ \u2212 2\n\u00b5\n\nd\n\n \u22122M 2(p+\u03b2p0)(p\u2212p0)\n(6\u2212d)(1+2\u03b2)\n\np > pmax = p0,\np < pmin = \u2212\u03b2p0,\ny(p, q) \u2264 0,\n\nb\n\u2225b\u2225\n\n+ 1\n\nd sum(b)1 Otherwise\n\n(7)\n\nPlease refer to [2] for the hardening state update procedure, which is\ncontrolled by the simulator. For PlasticityNet, we set h = min{\u03b1, 0} as the hardening state input.\nDuring the training, we sample h \u2208 [\u22120.5, 0] for 2D snow and h \u2208 [\u22121, 0] for 3D snow.\n\nA.2.3 Metal Plasticity under StVK Elasticity\n\nWe use StVK elasticity and von-Mises plasticity for metal simulations [1]. This combination provides\na closed-form return mapping projection.\n\nThe elastic region is characterized by\n\n\u2225\u03c4 \u2212\n\n1\nd\n\nsum(\u03c4 )\u2225 \u2212 \u03c4y \u2264 0,\n\n(8)\n\nwhere \u03c4y controls the radius of the yield surface in the stress space\n(Figure 3).\n\nThe return mapping for the von-Mises plasticity is defined as\n\n\n\nZ(\u03a3) =\n\n\u03a3,\nexp (\u03f5 \u2212 \u03b4\u03b3 \u02c6\u03f5\n\n\u2225\u03c4 \u2212 1\n\nd sum(\u03c4 )\u2225 \u2212 \u03c4y \u2264 0\n\n,\n\n(9)\n\n\u2225\u02c6\u03f5\u2225 ), Otherwise\n\nwhere \u03b4\u03b3 = \u2225\u02c6\u03f5\u2225F \u2212 \u03c4y\n2\u00b5 .\n\nUnder hardening, \u03c4Y is updated with\n\n\u03c4 n+1\nY = \u03c4 n\n\nY + 2\u00b5\u03be\u03b4\u03b3,\n\n(10)\n\nFigure 3: Von-Mises plastic-\nity\u2019s elastic region in the stress\nspace.\n\nwhere \u03be is the hardening coefficient.\nWe use h = \u03c4Y\nfrom [0, 1].\n\n2\u00b5 as the hardening state input to our PlasticityNet. During the training, h is sampled\n\nA.2.4 Metal Plasticity under Neo-Hookean Elasticity\n\nThe combination of neo-Hookean elasticity and von-Mises plasticity does not have a closed-form\nreturn mapping, we thereby use this combination for the task of learning metal plasticity return\nmapping. The Kirchhoff stress of neo-Hookean elasticity is given by\n\n\u03c4 = \u00b5(\u03a32 \u2212 1) + \u03bb log J1.\n\n(11)\n\n3\n\n\fThe implicit representation of the elastic region we used in the training of the return mapping is given\nby\n\nsum(\u03c4 )\u22252 \u2212 (2\u00b5h)2.\n\n(12)\n\nDuring training, h is sampled from [0, 1].\n\ny(\u03a3, h) = \u2225\u03c4 \u2212\n\nReferences\n\n1\nd\n\n[1] G. Kl\u00e1r, T. Gast, A. Pradhana, C. Fu, C. Schroeder, C. Jiang, and J. Teran. Drucker-prager\nelastoplasticity for sand animation. ACM Transactions on Graphics (TOG), 35(4):1\u201312, 2016.\n\n[2] J. Wolper, Y. Fang, M. Li, J. Lu, M. Gao, and C. Jiang. Cd-mpm: continuum damage material\npoint methods for dynamic fracture animation. ACM Transactions on Graphics (TOG), 38(4):1\u2013\n15, 2019.\n\n4\n\n\f\n\nBased on the section(s), please answer the following question with yes, no, or n/a and provide a brief justification for your answer.\nQuestion: If the authors ran experiments, do the authors specify all the training details (e.g., data splits, hyperparameters, how they were chosen)?"}, "3d": {"role": "user", "content": "The following is the experiments section of the paper you are reviewing:\n\n\nWe show examples to demonstrate the capability of our PlasticityNet in learning versatile plasticity\nmodels. Our physical simulators are implemented using C++, and we applied PyTorch to learn the\npotential energies, which are then loaded into our simulators with TorchScript. All our potential\nenergies are trained as multilayer perceptrons using the Adam optimizer [22] on a single Nvidia RTX\n3090 GPU. Please see Appendix A.1 for more training details. All ground-truth data are generated\nusing standard explicit time integration with analytical plasticity returning mapping under small time\nstep sizes for stability. With our PlasticityNet, we can robustly simulate elastoplastic behaviors with\nmuch larger time step sizes using optimization time integrators.\n\n5.1 Training\n\nThe training of PlasticityNet only requires the return mapping (either given analytically or pre-trained)\nfor the plasticity model and the Kirchhoff stress for the underlying elasticity model. There is no need\nfor extra labeled data. At each epoch, we will sample a new batch of (F, F0, h). The sampling of\ndeformation gradients is based on its singular value decomposition F = U Diag(\u03a3)V\u22a4, with U, V\nbeing two rotation matrices. To sample F and F0 so that their singular values are close to each other,\nwe set F0 = R1 Diag(e\u03f5)R2 and F = R3 Diag(e\u03f5+\u03b4\u03f5)R4, where \u03f5 is a randomly sampled vector, \u03b4\u03f5\nis a random perturbation, and Ri\u2019s are randomly sampled rotation matrices. The hardening state is\nsampled uniformly from an appropriate range depending on the plasticity model. Please see Appendix\nA.2 for definitions of hardening states and their range selections. In this work, we uniformly sample\n\u03f5 from [\u22121, 1]d, \u03b4\u03f5 from [\u22120.1, 0.1]d for sand plasticity and metal plasticity, and [\u22120.2, 0.2]d for the\nsnow plasticity. The training loss curves of our 2D models are shown in Figure 4.\n\n5.2 Testing on 2D Simulations\n\nIn this section, explicit time integrators are used to generate the ground-truth data for the validation\nof the optimization time integrators with PlasticityNet on multiple 2D experiments. The quantitative\ncomparisons are plotted in Figure 5. We additionally include the computational costs in Table 1. We\n\n6\n\nSandSnow02500500075001000012500150001750020000Epoch102101100101102Traning LossMetal\f(a)\n\n(b)\n\n(c)\n\nFigure 5: (a) (b) The intersection-over-union (IOU) [17] measure between the ground truth and our\nresults. The IOUs are computed using the mass distributions on the MPM grid. (c) The average FEM\nnodal position difference. Note that the bounding box of the 2D metal frame is 0.1m \u00d7 0.18m.\n\nTable 1: Computational costs of 2D experiments.\nOurs\n\nExplicit\n\nExperiment\n\nSand\nSnow\nVon-Mises Metal\nNeohookean Metal\nMPM-FEM Coupling\n\nTime step (s)\n1e-3\n1e-3\n1e-2\n1e-2\n1e-3\n\ns/frame\n12.58\n35.56\n1.08\n1.03\n38.90\n\nTime step (s)\n1e-5\n1e-5\n1e-5\n1e-5\n1e-6\n\ns/frame\n6.20\n6.78\n5.39\n7.88\n184.58\n\nremark that the main objective of our work is not to surpass the performance of the existing simulation\nof every constitutive model, but to provide a methodology that enables the usage of implicit plasticity\nin an optimization time integration framework.\n\nSand Plasticity We start by learning the elastoplas-\ntic model of dry sand (Figure 6). The model com-\nbination is St. Venant-Kirchhoff (StVK) elasticity,\nand the closed-form Drucker Prager plasticity return\nmapping [23] (See Appendix A.2.1). In this example,\nwe simulate a column of sand falling onto the ground\nunder gravity with MPM. Our method generates vi-\nsually identical results compared to the ground truth,\nboth with the same time step size and a 100\u00d7 larger\ntime step size. The quantitative comparison between\nour results and the ground truth is shown in Figure 5a.\nNote that there is no hardening mechanism in this\nplasticity model, so our PlasticityNet does not need the hardening state in its input.\n\nFigure 6: Sand plasticity.\n\nSnow Plasticity with Hardening Snow is an\nelastoplastic material that can become stiffer under\ncompression. Essentially, this is the effect of hard-\nening where its elastic region get expanded. The\nvariation in the stiffness across the snow body makes\nit easily fracture. Here we simulate a snowball hitting\nthe ground in the MPM simulator (Figure 7). We use\nNeo-Hookean elasticity with the closed-form non-\nassociative Cam-Clay plasticity return mapping [15]\n(See Appendix A.2.2). Our method generates similar\nresults compared to the ground truth when using the\nsame time step size. The quantitative comparison of\nour results and the ground truth is shown in Figure 5b. Our framework remains stable even under\nmuch larger time step sizes. However, more numerical damping artifacts are introduced as the time\nstep size increases, which results in slightly different behaviors compared to the ground truth.\n\nFigure 7: Snow plasticity with hardening.\n\n7\n\nSand0.00.20.40.60.81.0Simulation Time [s]0.750.800.850.900.951.00IoUSnowMetalOurs (dt = 1e-5s) Ground truth (dt = 1e-5s) Ours (dt = 1e-3s) Ours (dt = 1e-5s) Ground truth (dt = 1e-5s) Ours (dt = 1e-3s) \fMetal Plasticity with Hardening Metal is another com-\nmon plastic material with hardening. In this example, we\ntrain PlasticityNet to learn metal plasticity with the StVK\nelasticity and the closed-form von-Mises plasticity return\nmapping [39]. (See Appendix A.2.3) We simulate a metal\nframe compressed by a rigid plate in the FEM simulator\n(Figure 8), where the Incremental Potential Contact (IPC)\n[29] is used to handle the frictional contact between the\nsolids. When we run the explicit time integration to gen-\nerate ground truth, we have to decrease Young\u2019s modulus\nto enable using large enough time step sizes so that the\nsimulation can be finished in practical time. Our method\nwith the original setting generates visually identical re-\nsults using a much large time step size. The quantitative\ncomparison of our result and the ground truth is shown in\nFigure 5c.\n\nFigure 8: Metal plasticity with harden-\ning.\n\nMetal Plasticity Return Mapping Here we show an\nexample simulated using PlasticityNet with a learned von-\nMises plasticity return mapping. The underlying elasticity\nis neo-Hookean, instead of the StVK model in the last ex-\nample (See Appendix A.2.4). Note that for Neo-Hookean\nmaterial, there is no closed-form solution available for\nthe von-Mises return mapping. In this case, a nonlinear\noptimization problem will need to be solved to perform the return mapping for every element/particle\nin every time step, which could severely slow down the standard explicit time integration. Using\nthe same parameters as the metal compression experiments above, we show that PlasticityNet with\nlearned plasticity return mapping under neo-Hookean elasticity can generate qualitatively similar\nresults (Figure 9) to those from PlasticityNet with closed-form return mapping under the StVK\nelasticity.\n\nFigure 9: Learned metal plasticity return\nmapping with neo-Hookean elasticity.\n\nMPM-FEM Coupling PlasticityNet enables the sim-\nulation of plastic materials in the MPM-FEM coupling\nframework BFEMP [33], where only pure elasticity was\nsupported. When simulating with explicit BFEMP, the\ntime step size required by stability is the minimum be-\ntween MPM step size upperbound and FEM step size\nupperbound. Here we show an example where a stiff FEM\nelastic body falls onto MPM sand (Figure 10), where the\nimplicit BFEMP can use a time step size 1000x larger than\nthe explicit BFEMP and achieves an approximately 5x\nspeedup in wall-clock time. We also remark that when the time step size is small (as is required\nto keep the explicit time integration stable in this case), MPM suffers from excessive numerical\ndamping due to the significant amount of particle-grid transfers. This is a known issue of explicit\nMPM simulations.\n\nFigure 10: Two-way coupling between\nFEM elasticity and MPM sand plasticity.\n\nDifferent Energy Representations Here we include some different energy representations we\ninvestigated (Figure 11), whose inaccurate results motivated us to develop our final representation\nEquation 8. These experiments are all conducted on the 2D sand column collapse example. The\nfirst straightforward idea is to find a globally defined neural energy function \u03a8(F) = \u03a8\u03b8(F) that\nsolves Equation 6, where \u03b8 is the parameter of the neural network. Note that it is theoretically\nunachievable to train a global potential energy function because the right hand side of Equation 6 is not\nintegrable in the plastic region. But it is still worth trying to explore an approximation by minimizing\nL(\u03b8) = EF\n. However, the experiment shows that this formulation makes\nthe sand column behave like an elastic body. It is also noteworthy that the sand column cannot even\nmaintain the rest shape at the first frame: it erroneously shrinks suddenly and jumps off the ground.\nAdditional insight is provided by realizing that a linear correction is necessary to exactly vanish stress\nwhen the deformation gradient is the identity; so we experiment with \u03a8(F) = \u03a8\u03b8(F) \u2212 \u2207F\u03a8\u03b8(I).\n\n\u2202F (F) \u2212 \u03c4 (Z(F))F\u2212\u22a4(cid:13)\n\n(cid:13)\n(cid:13)\n(cid:13)\n\n\u2202\u03a8\u03b8\n\n(cid:13)\n(cid:13)\n\nF\n\n2\n\n8\n\nOurs (E = 1e7 Pa, dt = 1e-5s) Ground truth (E = 1e7 Pa, dt = 1e-5s) Ours (E = 1e10 Pa, dt = 1e-2s) Ours (dt = 1e-3s) Explicit (dt = 1e-6s) \fFigure 11: Ablation studies on different energy representations.\n\nFigure 13: 3D simulations with sand plasticity, snow palsticity and metal plasticity.\n\nThis formulation unfortunately also leads to an insufficient capture of plasticity, giving an elastic and\nvisually distinct incorrect result. These observations motivate us to investigate a family of potential\nenergies to solve Equation 6 locally. We first use \u03a8(F, F0) = \u03a8\u03b8(F, F0) \u2212 \u2207F\u03a8\u03b8(I, F0) and train\nwith the loss function in Equation 9. The simulation captures certain plastic behaviors when the\ndeformation is small, but the result quickly deviates from the ground truth when the deformation\nbecomes larger. Finally, we come up with Equation 8 to achieve the nice results in Figure 6.\n\n5.3 Ablation Studies\n\nStability Regularizer As an ablation study for the stabil-\nity regularizer in Equation 11, we compare the simulations\nwith and without the regularizer on two 2D examples (Fig-\nure 12). Without the regularizer, the metal frame can not\neven stay in its original rest configuration after the first\ntime step. In the sand example, particles in the highlighted\nregions tend to separate from the sand column in a non-\nphysical manner. These demonstrate that our regularizer\nsignificantly improves the stability of the simulation.\n\n5.4 Testing on 3D Simulations\n\nFigure 12: The regularizer significantly\nimproves the stability of the simulation.\n\nExtending PlasticityNet to support 3D simulation is straightforward. We only need to increase the\ndimension of the inputs to the PlasticityNet. To improve the expressiveness of the network, we also\nincrease the dimension of hidden variables. Here we demonstrate the 3D versions of our 2D examples\nwith similar physical parameters in Figure 13: 3D sand plasticity, 3D snow plasticity, and 3D metal\nplasticity. The 3D metal is simulated with \u2206t = 10\u22122, and for sand and snow, we use \u2206t = 10\u22123s\nto satisfy the CFL condition [8] in MPM, preventing the particles from traveling farther than the grid\ncell spacing in a single time step.\n\n\n\nThe following is the appendix section of the paper you are reviewing:\nPlasticityNet: Learning to Simulate Metal, Sand, and\nSnow for Optimization Time Integration:\nSupplemental Document\n\nXuan Li\nDepartment of Mathematics\nUniversity of California, Los Angeles\nxuanli1@math.ucla.edu\n\nYadi Cao\nDepartment of Computer Science\nUniversity of California, Los Angeles\nyadicao95@cs.ucla.edu\n\nMinchen Li\nDepartment of Mathematics\nUniversity of California, Los Angeles\nminchen@math.ucla.edu\n\nYin Yang\nSchool of Computing\nUniversity of Utah\nyin.yang@utah.edu\n\nCraig Schroeder\nDepartment of Computer Science and Engineering\nUniversity of California, Riverside\ncraigs@cs.ucr.edu\n\nChenfanfu Jiang\nDepartment of Mathematics\nUniversity of California, Los Angeles\ncffjiang@math.ucla.edu\n\nA Appendix\n\nA.1 Network Architecture\n\nAll our models are using the Multilayer Perceptron (MLP) architecture with Swiss activation functions\n(x sigmoid(x)) except the output layer. They are trained using ADAM optimizer with the same\nparameters: initial learning rate \u03b1 = 0.01, decay rate \u03b3 = 0.95, decay step 1000. The dataset is\ngenerated during the training process with random sampling, and the batch size is 216 for all cases.\nThe models are all trained with 20000 epochs. The detailed architectures for each model is listed in\nTable 1.\n\nTable 1: Network Architectures and Training Details\n\nModel\nSand (StVK+Drucker-Prager)\nSnow (Neohooken+NACC)\nMetal (StVK+von-Mises)\nSand 3D\nMetal 3D (StVK+von-Mises)\nSnow 3D\n\nMLP layers\n[8,32,32,32,1]\n[9,32,32,32,1]\n[9,32,32,32,1]\n[18,64,64,64,1]\n[19,64,64,64,1]\n[19,64,64,64,1]\n\nA.2 Technical Details on Plasticity Models\n\nWe focus on isotropic materials, where the elasticity and plasticity can both be described in the\ndiagonal space without loss of generality. Given the polar singular value decomposition of the\ndeformation gradient F = U Diag(\u03a3)V\u22a4, the Kirchhoff stress \u03c4 and the return mapping Z can both\nbe computed solely by \u03a3 as \u03c4 \u03a3 and Z \u03a3, and then restored to the full space via \u03c4 = U Diag(\u03c4 \u03a3)V\u22a4\n\n36th Conference on Neural Information Processing Systems (NeurIPS 2022).\n\n\fand Z = U Diag(Z \u03a3)V\u22a4. In the following sections, we will omit the superscript \u03a3 and only discuss\nthe models in the diagonal space.\n\nHere is a list of the material parameters that will be mentioned in the following sections:\n\nNotation Meaning\nE\n\u03bd\n\u00b5\n\u03bb\nK\n\nYoung\u2019s modulus\nPoisson\u2019s ratio\nShear modulus\nLam\u00e9 modulus\nBulk modulus\n\nRelation to (E, \u03bd)\n/\n/\n\u00b5 = E\n\u03bb =\nK = E\n\n2(1+\u03bd)\nE\u03bd\n(1+\u03bd)(1\u22122\u03bd)\n\n3(1\u22122\u03bd)\n\nA.2.1 Sand Plasticity\n\nWe use StVK elasticity and Drucker-Prager plasticity for sand simulations [1].\n\nThe Kirchhoff stress \u03c4 of StVK elasticity is defined as\n\n\u03f5 = log(\u03a3),\n\u03c4 = 2\u00b5\u03f5 + \u03bb sum(\u03f5)1.\n\n(1)\n\nThe elastic region is characterised in the stress space as:\n\n\u03b1 sum(\u03c4 ) + \u2225 sum(\u03c4 ) \u2212\n\nsum(\u03c4 )\nd\n\n1\u2225 \u2264 0,\n\n(2)\n\n 2\n3\n\n2 sin \u03d5f\nwhere \u03b1 =\n3\u2212sin \u03d5f\nexamples, \u03d5f is set to \u03c0\nshown in Figure 1.\n\nand \u03d5f is the friction angle. In our sand\n6 . The elastic region in the stress space is\n\nThe return mapping for the Drucker-Prager plasticity is\n\nZ(\u03a3) =\n\n\uf8f1\n1\n\uf8f4\uf8f2\n\u03a3\nexp (\u03f5 \u2212 \u03b4\u03b3 \u02c6\u03f5\n\n\uf8f4\uf8f3\n\n\u2225\u02c6\u03f5\u2225 )\n\nsum(\u03f5) > 0\n\u03b4\u03b3 \u2264 0, and sum(\u03f5) \u2264 0\notherwise\n\n,\n\n(3)\n\nFigure 1: Drucker-Prager plas-\nticity\u2019s elastic region in the\nstress space.\n\nwhere \u03b4\u03b3 = \u2225\u02c6\u03f5\u2225 + \u03b1 (d\u03bb+2\u00b5) sum(\u03f5)\n\n2\u00b5\n\n.\n\nA.2.2 Snow Plasticity\n\nWe use neo-Hookean elasticity and non-associative Cam-Clay (NACC) plasticity for snow simulations\n[2].\n\nThe Kirchhoff stress of neo-Hookean elasticity is\n\nJ = det Diag(\u03a3),\nb = \u03a32,\n\nb = dev(b) = b \u2212\n\n\u03c4 = \u00b5J \u2212 2\n\nd b +\n\nK\n2\n\n1,\n\nsum(b)\nd\n(J 2 \u2212 1)1.\n\nThe elastic region of NACC is characterized by\n\ny(p, q) = q2(1 + 2\u03b2) + M 2(p + \u03b2p0)(p \u2212 p0) \u2264 0,\n\nwhere\n\n2\n\n(4)\n\n(5)\n\n\f\n\n6 \u2212 d\n2\n\n 2\n3\n\n2 sin \u03d5f\n3 \u2212 sin \u03d5f\n\nM = d\n\np =\n\nK\n2\n\n(J 2 \u2212 1),\n\n\n6 \u2212 d\n2\n\nq = \u00b5J \u2212 2\n\nd\n\n(6)\n\n\u2225b\u2225,\n\np0 = K sinh(\u03be max{\u2212\u03b1, 0}).\n\n\u03be, \u03b2, \u03d5f are the parameters of plasticity and \u03b1 is the hardening state.\nThe elastic region in the stress space is shown in Figure 2. In our\nsnow examples, \u03be = 0.5, \u03b2 = 0.3 and \u03d5f = \u03c0\n4 .\nThe return mapping is defined as\n\nFigure 2: NACC plasticity\u2019s\nelastic region in the stress\nspace.\n\nK )\u2212 1\nK )\u2212 1\n\n2d 1,\n2d 1,\n\nZ(\u03a3) =\n\n\uf8f1\n\n\uf8f4\uf8f4\uf8f4\uf8f4\uf8f2\n\uf8f4\uf8f4\uf8f4\uf8f4\uf8f3\n\n(1 \u2212 2pmax\n(1 + 2pmin\n\u03a3,\nJ \u2212 2\n\u00b5\n\nd\n\n \u22122M 2(p+\u03b2p0)(p\u2212p0)\n(6\u2212d)(1+2\u03b2)\n\np > pmax = p0,\np < pmin = \u2212\u03b2p0,\ny(p, q) \u2264 0,\n\nb\n\u2225b\u2225\n\n+ 1\n\nd sum(b)1 Otherwise\n\n(7)\n\nPlease refer to [2] for the hardening state update procedure, which is\ncontrolled by the simulator. For PlasticityNet, we set h = min{\u03b1, 0} as the hardening state input.\nDuring the training, we sample h \u2208 [\u22120.5, 0] for 2D snow and h \u2208 [\u22121, 0] for 3D snow.\n\nA.2.3 Metal Plasticity under StVK Elasticity\n\nWe use StVK elasticity and von-Mises plasticity for metal simulations [1]. This combination provides\na closed-form return mapping projection.\n\nThe elastic region is characterized by\n\n\u2225\u03c4 \u2212\n\n1\nd\n\nsum(\u03c4 )\u2225 \u2212 \u03c4y \u2264 0,\n\n(8)\n\nwhere \u03c4y controls the radius of the yield surface in the stress space\n(Figure 3).\n\nThe return mapping for the von-Mises plasticity is defined as\n\n\n\nZ(\u03a3) =\n\n\u03a3,\nexp (\u03f5 \u2212 \u03b4\u03b3 \u02c6\u03f5\n\n\u2225\u03c4 \u2212 1\n\nd sum(\u03c4 )\u2225 \u2212 \u03c4y \u2264 0\n\n,\n\n(9)\n\n\u2225\u02c6\u03f5\u2225 ), Otherwise\n\nwhere \u03b4\u03b3 = \u2225\u02c6\u03f5\u2225F \u2212 \u03c4y\n2\u00b5 .\n\nUnder hardening, \u03c4Y is updated with\n\n\u03c4 n+1\nY = \u03c4 n\n\nY + 2\u00b5\u03be\u03b4\u03b3,\n\n(10)\n\nFigure 3: Von-Mises plastic-\nity\u2019s elastic region in the stress\nspace.\n\nwhere \u03be is the hardening coefficient.\nWe use h = \u03c4Y\nfrom [0, 1].\n\n2\u00b5 as the hardening state input to our PlasticityNet. During the training, h is sampled\n\nA.2.4 Metal Plasticity under Neo-Hookean Elasticity\n\nThe combination of neo-Hookean elasticity and von-Mises plasticity does not have a closed-form\nreturn mapping, we thereby use this combination for the task of learning metal plasticity return\nmapping. The Kirchhoff stress of neo-Hookean elasticity is given by\n\n\u03c4 = \u00b5(\u03a32 \u2212 1) + \u03bb log J1.\n\n(11)\n\n3\n\n\fThe implicit representation of the elastic region we used in the training of the return mapping is given\nby\n\nsum(\u03c4 )\u22252 \u2212 (2\u00b5h)2.\n\n(12)\n\nDuring training, h is sampled from [0, 1].\n\ny(\u03a3, h) = \u2225\u03c4 \u2212\n\nReferences\n\n1\nd\n\n[1] G. Kl\u00e1r, T. Gast, A. Pradhana, C. Fu, C. Schroeder, C. Jiang, and J. Teran. Drucker-prager\nelastoplasticity for sand animation. ACM Transactions on Graphics (TOG), 35(4):1\u201312, 2016.\n\n[2] J. Wolper, Y. Fang, M. Li, J. Lu, M. Gao, and C. Jiang. Cd-mpm: continuum damage material\npoint methods for dynamic fracture animation. ACM Transactions on Graphics (TOG), 38(4):1\u2013\n15, 2019.\n\n4\n\n\f\n\nBased on the section(s), please answer the following question with yes, no, or n/a and provide a brief justification for your answer.\nQuestion: If the authors ran experiments, do the authors include the total amount of compute and the type of resources used (e.g., type of GPUs, internal cluster, or cloud provider)?"}}}